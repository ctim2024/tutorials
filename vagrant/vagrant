step 1 : install Vagrant : - apt install vagrant
                           - vagrant --version
step 2 : select VM Provider. Vagrant has direct support for VirtualBox, Hyper-V, Docker
step 3 : Create new folder for Vagrant project
step 4 : On terminal or command line navigate to the folder and initiate vagrant project : - vagrant init (this will create a new Vagrantfile in the folder. Vagrantfile is a configuration file that defines the settings for your virtual machine
step 5 : Choose a box to use : https://app.vagrantup.com/boxes/search (A box is a pre-configured vm image that you can use as starting point for your vm)
step 6 : Add configuration of the box in vagrantfile (for exemple, you could use the 'ubuntu/bionic64' box by adding the following line to your Vagrantfile : config.vm.box="ubuntu/bionic64"  , we can also directly add configuration for the vm using the following command : - vagrant init centos/7 (if vagrantfile does not already exists)

- vagrant box add centos/7 (will add box to vagrant, but will not create Vagrant file))

step 7 : Start vm using command : - vagrant up (this will create a new vm using the box you selected, the first time , vagrant will download the box from internet

step 8 : SSH into the vm : - vagrant ssh

                           - /home/boubaker/.vagrant.d/boxes  : the home of boxes in your host    
          
          
          
          


Provision the vm : (look in pictures)
   Provisionning a virtual machine means process of setting up and configuring a vm with necessary software and resources needed for a particular task or application
   Provisionning can be done by logging into the vm and making the necessary changes or it can be automated using configuration management tools like Ansible, Chef, or Puppet.
   Automated provisionning can save time and ensure consistency across multiple vms or environments.
   Vagrant allows for easy provisioning of vms using configuration files called "Vagrantfiles" which specify the desired state of the vm.
   



NETWORKING :

   
   
Vagrant offers the following three network options:
Port forwarding
Private network (host-only network)
Public network (bridged network)

Today we will learn:
How to do port forwarding in Vagrant
How to access an application running on VM from the Host machine browser

Port Forwarding :

Networking allows access to the Virtual Machine from outside (like from the host system)
Vagrant by default forwards port 22 from the guest machine (VM) to an open port in the host machine
Users can also forward a specific port of your choice using vagrantfile

Step 1 - Open vagrantfile and add this line

config.vm.network "forwarded_port", guest: 80, host: 8080

Users can now access the webserver running in VM by navigating to http://localhost:8080 on your host machine

Step 2 - Add provision script to install and start Apache Server on the VM

Step 3 - Restart VM with updated Vagrantfile vagrant reload --provision

Step 4 - On the host machine open browser and goto http://localhost:8080
What if port 8080 is busy

Step 5 - Add auto-correction option auto_correct: true in Vagrantfile

By default, Vagrant will choose auto-correction port between port 2200 and port 2250 range. You can also choose your own custom range
config.vm.usable_port_range = (2200..2250)  





How to Share folders between the host and the virtual machine :




Note: By default the folder where you have Vagrantfile is shared to the /vagrant folder on the VM

Step 1 - Open Vagrantfile and add

config.vm.synced_folder "/path/to/host/folder", "/path/to/guest/folder"

Step 2 - Save the file and goto the file location on Terminal and run command vagrant up

Step 3 - SSH into the VM  vagrant ssh

Step 4 -  Navigate to the guest folder that you specified in the Vagrantfile




SNAPSHOT :

What is a Snapshot
Full copy of the VM in its Current state
All configurations - disk contents, apps, packages, folders, memory
Creates backup of the Virtual Machine
Restoring the VM from an earlier state

vagrant snapshot save my_snapshot  - save the current state of the VM so that we can rollback at a later time

vagrant snapshot list - show list of saved snapshots

vagrant snapshot restore my_snapshot - restore the machine from an earlier snapshot

vagrant snapshot delete my_snapshot - delete the snapshot

Location of Snapshots
Note: Snapshots do not include the Vagrantfile or any other configuration files in your project directory
These files are separate from the snapshot and can be shared or version controlled separately



Step 5 - You should see the contents of the shared folder from your host machine in the guest machine's folder 
                         
